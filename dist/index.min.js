const l=console.log.bind(console),axios=require("axios"),{createWriteStream:createWriteStream,existsSync:existsSync,mkdirSync:mkdirSync}=require("fs"),loader=(e,{from:t,to:r},s)=>{(async()=>{const{baseURL:o,lessonsNumber:i,dir:n}=await(async e=>{const t={from:'<ul id="lessons-list" class="lessons-list">',to:"</ul>"},r={from:'<link href="',to:'" '};let s;try{({data:s}=await axios.get(e,{responseType:"text"}))}catch(e){return l("Request error!"),{}}let o=s.slice(s.indexOf(t.from)+t.from.length);const i=(o=o.slice(0,o.indexOf(t.to))).match(/<\/li>/g).length;let n=o.slice(o.indexOf(r.from)+r.from.length);return{baseURL:n=(n=n.slice(0,e.indexOf(r.to))).match(/(.*?\/\/.*?\/.*?)\//)[1],lessonsNumber:i,dir:n.match(/\/([\w-]*$)/)[1]}})(e);if(!o)return;s||(s=n);const a=((e=1,t=i)=>{if(Array.isArray(e))return e;if(Array.isArray(t))return t;if("number"!=typeof(e+t))return void l(`Invalid data type! typeof (from) is ${typeof e}, typeof (to) is ${typeof t}`);e=Math.max(e,1),t=Math.min(t,i);const r=[];for(let s=e;s<t+1;s++)r.push(s);return r})(t,r);if(!a)return;let c=a.length-1;const f=e=>`/lesson${e}.mp4`;for(let e of a){let t;try{({data:t}=await axios.get(o+f(e),{responseType:"stream"}))}catch(e){return void l("Request error!")}existsSync(s)||mkdirSync(s);const r=createWriteStream(s+f(e));r.on("close",()=>{l(`lesson${e} is ready!`),c--||l("Loading is finished!")}),t.pipe(r)}})()};module.exports=loader;