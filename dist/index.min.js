const l=console.log.bind(console),axios=require("axios"),{createWriteStream:createWriteStream,existsSync:existsSync,mkdirSync:mkdirSync}=require("fs"),loader=(e,s="all",t)=>{(async()=>{const{baseURL:r,lessonsNumber:o,dir:i}=await(async e=>{const s={from:'<ul id="lessons-list" class="lessons-list">',to:"</ul>"},t={from:'<link href="',to:'" '};let r;try{({data:r}=await axios.get(e,{responseType:"text"}))}catch(e){return l("Request error!"),{}}let o=r.slice(r.indexOf(s.from)+s.from.length);const i=(o=o.slice(0,o.indexOf(s.to))).match(/<\/li>/g).length;let n=o.slice(o.indexOf(t.from)+t.from.length);return{baseURL:n=(n=n.slice(0,e.indexOf(t.to))).match(/(.*?\/\/.*?\/.*?)\//)[1],lessonsNumber:i,dir:n.match(/\/([\w-]*$)/)[1]}})(e);if(!r)return;t||(t=i),"all"===s&&(s=o);let n=s-1;const a=e=>`/lesson${e}.mp4`;for(let e=1;e<s+1;e++){let s;try{({data:s}=await axios.get(r+a(e),{responseType:"stream"}))}catch(e){return void l("Request error!")}existsSync(t)||mkdirSync(t);const o=createWriteStream(t+a(e));o.on("close",()=>{l(`lesson${e} is ready!`),n--||l("Loading is finished!")}),s.pipe(o)}})()};module.exports=loader;